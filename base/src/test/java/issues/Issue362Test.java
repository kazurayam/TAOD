package issues;

import com.kazurayam.materialstore.base.inspector.Inspector;
import com.kazurayam.materialstore.base.reduce.MaterialProductGroup;
import com.kazurayam.materialstore.core.TestHelper;
import com.kazurayam.materialstore.core.filesystem.JobName;
import com.kazurayam.materialstore.core.filesystem.JobTimestamp;
import com.kazurayam.materialstore.core.filesystem.MaterialList;
import com.kazurayam.materialstore.core.filesystem.MaterialstoreException;
import com.kazurayam.materialstore.core.filesystem.Store;
import com.kazurayam.materialstore.core.filesystem.Stores;
import com.kazurayam.materialstore.core.util.CopyDir;
import com.kazurayam.materialstore.core.util.DeleteDir;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * This test was developed initially to reproduce the problem raised at
 * - https://github.com/kazurayam/materialstore/issues/362
 * and to test any changes made to fix various issues around the issue362.
 * This test uses the files in the base/src/test/fixtures/issue#363 as fixture.
 * This fixture was generated by
 * - https://github.com/kazurayam/VisualInspectionInKatalonStudio_Reborn/blob/master/Scripts/main/MyAdmin/0_Main_Twins/Script1666270485532.groovy
 * with the materialstore-0.12.5-SNAPSHOT.
 *
 * This test performs the similar processing as
 * - main/MyAdmin/3_reduceTwins https://github.com/kazurayam/VisualInspectionInKatalonStudio_Reborn/blob/master/Scripts/main/MyAdmin/3_reduceTwins/Script1666270543170.groovy
 * which executes
 *
 * ```
 * MateriaProductGroup Inspector#reduceAndSort(MaterialProductGroup)
 * ```
 *
 * and verifies the outcome.
 */
public class Issue362Test {

    private Store store;
    private Path issue362fixtureDir;

    @BeforeEach
    public void beforeEach() throws IOException {
        Path testClassOutputDir = TestHelper.createTestClassOutputDir(this);
        store = Stores.newInstance(testClassOutputDir.resolve("store"));
        issue362fixtureDir = TestHelper.getFixturesDirectory().resolve("issue#362");
    }

    @Test
    public void test_smoke() throws MaterialstoreException, IOException {
        JobName jobName = new JobName("test_smoke");
        JobTimestamp leftJobTimestamp = new JobTimestamp("20221119_085006");
        JobTimestamp rightJobTimestamp = new JobTimestamp("20221119_085016");
        // setup fixture
        deployFixture(jobName);
        // Prepare
        MaterialList leftMaterialList = store.select(jobName, leftJobTimestamp);
        MaterialList rightMaterialList = store.select(jobName, rightJobTimestamp);
        MaterialProductGroup mpg =
                MaterialProductGroup.builder(leftMaterialList, rightMaterialList)
                        .ignoreKeys("profile", "URL.host", "URL.port")
                        .labelLeft("ProductionEnv")
                        .labelRight("DevelopmentEnv")
                        .sort("step")
                        .build();
        Inspector inspector = Inspector.newInstance(store);

        // Action 1:
        MaterialProductGroup reduced = inspector.reduceAndSort(mpg);

        // verify the inspected MaterialProductGroup
        assertEquals(6,
                store.select(jobName, reduced.getJobTimestampOfReduceResult()).size()
        );

        // Action 2: compile HTML report
        Path report = inspector.report(reduced, 0.0);
        // verify the report
        assertTrue(Files.exists(report));
    }

    private void deployFixture(JobName jobName) throws IOException, MaterialstoreException {
        Path targetDir = store.getPathOf(jobName);
        // prepare the fixture files
        if (targetDir != null) {
            DeleteDir.deleteDirectoryRecursively(targetDir);
        }
        targetDir = store.getRoot().resolve(jobName.getJobName());
        Files.createDirectories(targetDir);
        Path sourceDir = issue362fixtureDir.resolve("store/MyAdmin");
        assert Files.exists(sourceDir);
        Files.walkFileTree(sourceDir, new CopyDir(sourceDir, targetDir));
    }
}
