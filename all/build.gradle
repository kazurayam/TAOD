/**
 * The "all" sub-project does the following:
 * 1. generates a jar that combines all the classes of the core+base+other sub-projects
 * 2. generates a jar of javadoc of the combined sub-projects
 * 3. generates a jar of sources of the combined sub-projects
 * 4. publishes the jars to the Maven repositories: MavenLocal and MavenCentral at
 *    https://mvnrepository.com/artifact/com.kazurayam/materialstore
 */
archivesBaseName = rootProject.name
version = rootProject.version

sourceSets {
    combine {
        java {
            srcDir project(':core').file('src/main/java')
            srcDir project(':base').file('src/main/java')
            srcDir project(':mapper').file('src/main/java')
            srcDir project(':tutorial').file('src/main/java')
        }
        resources {
            srcDir project(':core').file('src/resources')
            srcDir project(':base').file('src/resources')
            srcDir project(':mapper').file('src/resources')
            srcDir project(':tutorial').file('src/resources')
        }
    }
}

configurations {
    combineCompile.extendsFrom compile
}

task showConfigurations() {
    doLast {
        configurations.getAll().each {
            println it.getName()

            it.getExtendsFrom().forEach {
                println "    extends from " + it.getName()
            }

        }
    }
}

dependencies {
    implementation project(":core")
    implementation project(":base")
    implementation project(":mapper")
    implementation project(":tutorial")
    /*
    implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.14.3'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.1.3'
    implementation group: 'ru.yandex.qatools.ashot', name: 'ashot', version: "1.5.4"
    implementation group: 'org.freemarker', name: 'freemarker', version: "2.3.31"
    implementation group: 'io.github.java-diff-utils', name: 'java-diff-utils', version: "4.9"
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '3.17'
    implementation group: 'com.rometools', name: 'rome', version: '1.18.0'
    implementation group: 'com.kazurayam', name: 'kazurayam_FreeMarker_directives', version: "0.2.0"
    implementation group: 'net.sf.cssbox', name: 'pdf2dom', version: '2.0.1'
    implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.25'
    implementation group: 'org.apache.pdfbox', name: 'pdfbox-tools', version: '2.0.25'
    implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.9.0'
    implementation group: 'com.kazurayam', name: 'subprocessj', version: '0.3.4'
*/
}







/*---------------------------------------------------------------------
 * create single library jar containing all sub projects' classes
 */



/**
 * https://stackoverflow.com/questions/63287292/how-to-combine-multiple-javadoc-into-one-using-gradle
 */
def subProjects = [
        ":core",
        ":base",
        ":mapper",
        ":tutorial"
]


task javadocAll(type: Javadoc) {
    source subProjects.collect {
        project(it).sourceSets.main.allJava
    }
    classpath = files(subProjects.collect {
        project(it).sourceSets.main.compileClasspath
    })
    destinationDir = file("${buildDir}/docs/javadoc-all")
    failOnError false
    options.locale = "en_US"
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadocAll
}

task copyJavadocAllToDocsDir(type: Copy) {
    from 'build/docs/javadoc'
    into 'docs/api'
}
javadocAll.finalizedBy copyJavadocAllToDocsDir

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from subProjects.collect {
        project(it).sourceSets.main.allJava
    }
}


publishing {
    publications {
        materialstore(MavenPublication) {
            artifact sourcesJar
            artifact javadocJar
            pom {
                groupId = project.group
                name = project.rootProject.name
                description = 'A Java/Groovy API to store objects (Screenshots, HTML, JSON, XML) collected during End-to-end testings empowered by diffing and reporting tools'
                url = 'https://kazurayam.github.io/materialstore/'
                from components.java
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org.licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'kazurayam'
                        name = 'URAYAMA,kazuaki'
                        email = 'kazuaki.urayama@gmail.com'
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/kazurayam/${project.rootProject.name}.git"
                    developerConnection = "scm:git:git@github.com:kazurayam/${project.rootProject.name}.git"
                    url = "https://github.com/kazurayam/${project.rootProject.name}"
                }
            }
        }
    }
    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }
}

signing {
    sign publishing.publications.materialstore
}

// I do not want to sign the SNAPSHOT
tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}
