group 'com.kazurayam'
version '0.9.1-SNAPSHOT'

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

allprojects {
    apply plugin: 'java'
    repositories {
        mavenCentral()
        mavenLocal()
    }
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    def defaultEncoding = 'UTF-8'
    tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }
    tasks.withType(GroovyCompile).each { it.groovyOptions.encoding = defaultEncoding }
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked' << "-Xlint:deprecation"
    }
}

subprojects {
    apply plugin: 'jacoco'
    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    dependencies {
        // Gson is required by com.kazurayam.materialstore.filesystem.TemplateReady
        implementation group: 'com.google.code.gson', name: 'gson', version: "2.8.9"

        // https://mvnrepository.com/artifact/commons-io/commons-io
        implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'

        // httpclient is required by com.kazurayam.materialstore.filesystem/Metadata
        implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

        // https://mvnrepository.com/artifact/org.apache.httpcomponents.client5/httpclient5
        implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.1.3'

        // slf4j is required by many classes in this library
        implementation group: 'org.slf4j', name: 'slf4j-api', version: "1.7.31"

        testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: "1.7.31"

        // JUnit Jupiter is used by all unit tests of all subprojects
        testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    }

    task showSourceSets(){
        doLast{
            sourceSets.each { srcSet ->
                println "[" + srcSet.name + "]"
                println "--> Source directories: " + srcSet.allJava.srcDirs
                println "--> Output directories: " + srcSet.output.classesDirs.files
                println "--> Compile classpath:"
                srcSet.compileClasspath.files.each {
                    println "  " + it.path
                }
                println ""
            }
        }
    }

    task showConfigurations() {
        doLast {
            configurations.getAll().each {
                println it.getName()

                it.getExtendsFrom().forEach {
                    println "    extends from " + it.getName()
                }

            }
        }
    }
}

task allJar(type: Jar) {
    from subprojects.collect {prj -> prj.tasks.withType(Jar) }
    into "${buildDir}/allJar"
}

task allJavadoc(type: Javadoc) {
    group = 'aggregation'
    description = rootProject.name
    title = "$description $version API"
    destinationDir = file("${buildDir}/docs/javadoc")

    def sourceProjects =
            subprojects.findAll {
                it.plugins.hasPlugin('java') || it.plugins.hasPlugin('groovy')
            }
    source sourceProjects.collect { prj -> prj.sourceSets.main.allJava }
    classpath = files(sourceProjects.collect { prj -> prj.sourceSets.main.runtimeClasspath })

    options.overview = 'gradle/api/overview.html'
    options.showFromProtected()
    failOnError = false
}