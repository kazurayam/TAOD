package com.kazurayam.materialstore.report;

import com.github.difflib.DiffUtils;
import com.github.difflib.patch.Patch;
import com.kazurayam.materialstore.MaterialstoreException;
import com.kazurayam.materialstore.TextDiffUtil;
import com.kazurayam.materialstore.filesystem.JobName;
import com.kazurayam.materialstore.filesystem.JobTimestamp;
import com.kazurayam.materialstore.filesystem.MaterialList;
import com.kazurayam.materialstore.filesystem.Store;
import com.kazurayam.materialstore.filesystem.Stores;
import com.kazurayam.materialstore.filesystem.QueryOnMetadata;
import org.apache.commons.io.FileUtils;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;

import static org.apache.commons.io.FileUtils.deleteDirectory;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * MaterialListBasicReportFM class is developed in Java, not in Groovy
 *
 * MaterialListBasicReportFM uses Free Marker as the HTML template engine.
 *
 */
public class MaterialListBasicReporterFMTest extends AbstractReporterTest {

    private static final Logger logger = LoggerFactory.getLogger(MaterialListBasicReporterFMTest.class);

    private static final Path testOutput =
            Paths.get(".").resolve("build/tmp/testOutput");

    private static final Path outputDir =
            testOutput.resolve(MaterialListBasicReporterFMTest.class.getName());

    private static final Path resultsDir =
            Paths.get(".").resolve("src/test/fixture/sample_results");

    @BeforeAll
    static void beforeAll() throws IOException {
        if (Files.exists(outputDir)) {
            deleteDirectory(outputDir.toFile());
        }
        Files.createDirectories(outputDir);
    }

    @Test
    void test_report() throws IOException, MaterialstoreException {
        Path root = outputDir.resolve("store");
        Store store = Stores.newInstance(root);
        JobName jobName = new JobName("test_report");
        // make sure the Job directory to be empty
        FileUtils.deleteDirectory(root.resolve(jobName.toString()).toFile());
        // stuff the Job directory with a fixture
        Path jobNameDir = root.resolve(jobName.toString());
        FileUtils.copyDirectory(resultsDir.toFile(), jobNameDir.toFile());
        //
        MaterialListReporter reporter =
                new MaterialListBasicReporterFM(store, jobName);
        reporter.setDebug(true);
        //
        JobTimestamp jobTimestamp = new JobTimestamp("20210715_145922");
        MaterialList list = store.select(jobName, jobTimestamp,
                QueryOnMetadata.builder()
                        .put("profile", Pattern.compile(".*Env"))
                        .put("category", "page source")
                        .build()
        );
        assertTrue(list.size() > 0, "list is empty");
        String fileName = "test_report-listFM.html";
        Path report = reporter.report(list, fileName);
        //
        assertTrue(Files.exists(report));

        // check if the report is 100% identical to the one generated by Groovy MarkupBuilder.
        Path reportByMarkupBuilder =
                testOutput.resolve(MaterialListBasicReporterTest.class.getName())
                        .resolve("store/test_report-list.html");
        assert Files.exists(reportByMarkupBuilder);

        // compare 2 report files using java-diff-utils
        List<String> original = trimLines(Files.readAllLines(reportByMarkupBuilder));
        List<String> revised = trimLines(Files.readAllLines(report));
        Path diff = outputDir.resolve("store").resolve("diff.md");
        TextDiffUtil.writeDiff(original, revised, diff,
                Arrays.asList("test_report-",
                        "MaterialListBasicReporterFMTest"));

        //compute the patch: this is the diffutils part
        Patch<String> patch = DiffUtils.diff(original, revised);
        patch.getDeltas().forEach(System.out::println);
        /*
[ChangeDelta, position: 92, lines: [<h1 class='title'>test_report-list] to [<h1 class='title'>test_report-listFM]]
[ChangeDelta, position: 98, lines: [<dd>build/tmp/testOutput/com.kazurayam.materialstore.report.MaterialListBasicReporterTest/store</dd>] to [<dd>build/tmp/testOutput/com.kazurayam.materialstore.report.MaterialListBasicReporterFMTest/store</dd>]]
[ChangeDelta, position: 125, lines: [<span class='metadata'>{"URL.host":{"key":"URL.host","value":"demoaut-mimic.kazurayam.com"}, "URL.path":{"key":"URL.path","value":"/"}, "URL.protocol":{"key":"URL.protocol","value":"http"}, "category":{"key":"category","value":"page source","matchedIndividually":true}, "profile":{"key":"profile","value":"DevelopmentEnv","matchedIndividually":true}, "xpath":{"key":"xpath","value":"/html"}}</span>] to [<span class='metadata'>{"URL.host":"demoaut-mimic.kazurayam.com", "URL.path":"/", "URL.protocol":"http", "category":"page source", "profile":"DevelopmentEnv", "xpath":"/html"}</span>]]
[ChangeDelta, position: 1039, lines: [<span class='metadata'>{"URL.host":{"key":"URL.host","value":"demoaut.katalon.com"}, "URL.path":{"key":"URL.path","value":"/"}, "URL.protocol":{"key":"URL.protocol","value":"http"}, "category":{"key":"category","value":"page source","matchedIndividually":true}, "profile":{"key":"profile","value":"ProductionEnv","matchedIndividually":true}, "xpath":{"key":"xpath","value":"/html"}}</span>] to [<span class='metadata'>{"URL.host":"demoaut.katalon.com", "URL.path":"/", "URL.protocol":"http", "category":"page source", "profile":"ProductionEnv", "xpath":"/html"}</span>]]
         */
        assertEquals(4, patch.getDeltas().size());
    }

}
