package com.kazurayam.materialstore.report;

import com.github.difflib.DiffUtils;
import com.github.difflib.patch.Patch;
import com.kazurayam.materialstore.Inspector;
import com.kazurayam.materialstore.MaterialstoreException;
import com.kazurayam.materialstore.TextDiffUtil;
import com.kazurayam.materialstore.filesystem.JobName;
import com.kazurayam.materialstore.filesystem.JobTimestamp;
import com.kazurayam.materialstore.filesystem.MaterialList;
import com.kazurayam.materialstore.filesystem.QueryOnMetadata;
import com.kazurayam.materialstore.filesystem.Store;
import com.kazurayam.materialstore.filesystem.Stores;
import com.kazurayam.materialstore.reduce.MProductGroup;
import org.apache.commons.io.FileUtils;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class MProductGroupBasicReporterFMTest extends AbstractReporterTest{

    static final Path fixtureDir = Paths.get(".")
            .resolve("src/test/fixture/issue#80");

    private static final Path testOutput =
            Paths.get(".").resolve("build/tmp/testOutput");

    static final Path outputDir = testOutput
            .resolve(MProductGroupBasicReporterFMTest.class.getName());

    static Store store;
    static final JobName jobName = new JobName("MyAdmin_visual_inspection_twins");
    static final JobTimestamp timestampP = new JobTimestamp("20220128_191320");
    static final JobTimestamp timestampD = new JobTimestamp("20220128_191342");

    MaterialList left;
    MaterialList right;

    @BeforeAll
    static void beforeAll() throws IOException {
        if (Files.exists(outputDir)) {
            boolean b = outputDir.toFile().delete();
        }
        Files.createDirectories(outputDir);
        Path storePath = outputDir.resolve("store");
        FileUtils.copyDirectory(fixtureDir.toFile(), storePath.toFile());
        store = Stores.newInstance(storePath);
    }

    @BeforeEach
    void beforeEach() {
        left = store.select(jobName, timestampP,
                QueryOnMetadata.builder(Collections.singletonMap(
                        "profile", "MyAdmin_ProductionEnv"))
                        .build());
        assert left.size() == 8;
        right = store.select(jobName, timestampD,
                QueryOnMetadata.builder(Collections.singletonMap(
                        "profile", "MyAdmin_DevelopmentEnv"))
                        .build());
        assert right.size() == 8;
    }

    @Test
    void test_report() throws IOException, MaterialstoreException {
        // pick up the materials that belongs to the 2 "profiles"
        String profile1 = "MyAdmin_ProductionEnv";
        MaterialList left = store.select(jobName, timestampP,
                QueryOnMetadata.builder(Collections.singletonMap("profile", profile1)).build());

        String profile2 = "MyAdmin_DevelopmentEnv";
        MaterialList right = store.select(jobName, timestampD,
                QueryOnMetadata.builder(Collections.singletonMap("profile", profile2)).build());

        Inspector inspector = Inspector.newInstance(store);

        // make diff of the 2 MaterialList objects
        // make diff
        MProductGroup prepared =
                MProductGroup.builder(left, right)
                        .ignoreKeys("profile", "URL", "URL.host")
                        .identifyWithRegex(
                                Collections.singletonMap(
                                        "URL.query", "\\w{32}"))
                        .build();

        MProductGroup reduced = inspector.reduce(prepared);

        // compile HTML report
        MProductGroupBasicReporterFM reporter = new MProductGroupBasicReporterFM(store, jobName);
        reporter.enableVerboseLogging(true);
        reporter.enablePrettyPrinting(true);

        Path report = reporter.report(reduced, jobName.toString() + "-index.html");
        assertTrue(Files.exists(report));

        // check if the report is 100% identical to the one generated by Groovy MarkupBuilder
        Path reportByMarkupBuilder =
                testOutput.resolve(MProductGroupBasicReporter_issue80_86Test.class.getName())
                        .resolve("store").resolve("MyAdmin_visual_inspection_twins-index.html");
        assert Files.exists(reportByMarkupBuilder);

        // compare 2 report files using java-diff-utils
        List<String> original = trimLines(Files.readAllLines(reportByMarkupBuilder));
        List<String> revised = trimLines(Files.readAllLines(report));

        Path diff = outputDir.resolve("store").resolve("diff.md");
        TextDiffUtil.writeDiff(original, revised, diff,
                Arrays.asList("test_report-",
                        "MProductGroupBasicReporterFMTest"));

        // compute the patch, display into the console
        Patch<String> patch = DiffUtils.diff(original, revised);
        patch.getDeltas().forEach(System.out::println);

        // assert the number of different lines equals as executed
        assertEquals(2, patch.getDeltas().size());

        // test the report content
        String reportText = readString(report);

        // make sure the HTML contains a string "class='ignored-key'"
        assertTrue(reportText.contains("class='ignored-key'"),
                "expected 'class=\"ignored-key\"' in the report but not found");

        // make sure the HTML contains a string "class='matched-value'"
        assertTrue(reportText.contains("class='matched-value'"),
                "expected 'class=\"matched-value\"' in the report but not found");

        // make sure the HTML contains a string "class='identified-value'"
        assertTrue(reportText.contains("class='identified-value'"),
                "expected a string 'class=\"identified-value\"' in the report but not found");

    }


}
